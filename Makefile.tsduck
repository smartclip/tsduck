#-----------------------------------------------------------------------------
#
#  TSDuck - The MPEG Transport Stream Toolkit
#  Copyright (c) 2005-2021, Thierry Lelegard
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#  THE POSSIBILITY OF SUCH DAMAGE.
#
#-----------------------------------------------------------------------------
#
#  Common makefile definitions for the TSDuck project.
#
#-----------------------------------------------------------------------------


# Duplicate output for specific compilers or profiling tools.

ifdef GCOV
    BINDIR_SUFFIX = -gcov
endif
ifdef GPROF
    BINDIR_SUFFIX = -gprof
endif
ifdef LLVM
    BINDIR_SUFFIX += -clang
endif
ifdef STATIC
    BINDIR_SUFFIX += -static
endif

# Standard common makefile is in same directory as this makefile.

include $(patsubst %/,%,$(dir $(lastword $(MAKEFILE_LIST))))/Makefile.common

# Project specific directories.

INSTALLERDIR = $(ROOTDIR)/installers
SRCROOT      = $(ROOTDIR)/src
LIBTSDUCKDIR = $(SRCROOT)/libtsduck
TSTOOLSDIR   = $(SRCROOT)/tstools
TSPLUGINSDIR = $(SRCROOT)/tsplugins

# TSDuck library files.

STATIC_LIBTSDUCK = $(BINDIR)/libtsduck.a
SHARED_LIBTSDUCK = $(BINDIR)/libtsduck$(SO_SUFFIX)

# Default installation root.
# RPM packagers should override this in the "make install" command line
# to build a temporary system root where TSDuck is installed.

SYSROOT =

# A shortcut-target to rebuild with static linking.
# Not meaningfull everywhere:
# - Static linking with system libraries is not supported on macOS.
# - On Linux, all used libraries must be installed. This is not supported
#   on all distros. On Fedora, you may install "glibc-static libstdc++-static"
#   but there is no static package for curl and pcsclite.

.PHONY: static
static:
	+@$(MAKE) STATIC=true

ifeq ($(STATIC),)
    # Dynamic (default) link
    LDLIBS := -ldl $(LDLIBS)
else ifdef MACOS
    $(error static linking is not supported on macOS)
else
    NOCURL  = true
    NOPCSC  = true
    NODTAPI = true
    NOSRT   = true
    NORIST  = true
    NOTEST  = true
    CFLAGS_INCLUDES += -DTSDUCK_STATIC=1
endif

# External include directories and libraries.

ifneq ($(CROSS)$(CROSS_TARGET),)
    # Some libraries are bypassed in cross-compilation.
    NOCURL  = true
    NOPCSC  = true
    NODTAPI = true
    NOSRT   = true
    NORIST  = true
endif

ifdef NOTELETEXT
    CFLAGS_INCLUDES += -DTS_NOTELETEXT=1
endif

ifdef ASSERTIONS
    CFLAGS_INCLUDES += -DTS_KEEP_ASSERTIONS=1
endif

ifeq ($(NOSRT),)
    # SRT not disabled, check if libsrt is available.
    NOSRT := $(if $(wildcard /usr/include/srt/*.h $(ALTDEVROOT)/include/srt/*.h),,true)
endif

ifneq ($(NOSRT),)
    CFLAGS_INCLUDES += -DTS_NO_SRT=1
else
    LDLIBS := -lsrt $(LDLIBS)
endif

ifeq ($(MACOS)$(LINUXBREW)$(RIST),)
    # Not on macOS, not using Linuxbrew and RIST not explicitly enabled.
    # Currently, RIST must be explicitly enabled on Linux since no standard distro package exists.
    NORIST := true
endif

ifeq ($(NORIST),)
    # RIST not disabled, check if librist is available.
    NORIST := $(if $(wildcard /usr/include/librist/*.h $(ALTDEVROOT)/include/librist/*.h),,true)
endif

ifneq ($(NORIST),)
    CFLAGS_INCLUDES += -DTS_NO_RIST=1
else
    LDLIBS := -lrist $(LDLIBS)
endif

ifeq ($(NOCURL),)
    # curl not disabled, check if available.
    export NOCURL := $(if $(call F_COMMAND,curl-config,),,true)
endif

ifneq ($(NOCURL),)
    CFLAGS_INCLUDES += -DTS_NO_CURL=1
else
    ifndef CFLAGS_CURL
        export CFLAGS_CURL := $(shell curl-config --cflags)
        export LDLIBS_CURL := $(shell curl-config --libs)
    endif
    CFLAGS_INCLUDES += $(CFLAGS_CURL)
    LDLIBS := $(LDLIBS_CURL) $(LDLIBS)
endif

ifeq ($(NOPCSC),)
    # PCSC not disabled, check if available.
    NOPCSC := $(if $(wildcard /usr/include/PCSC/*.h $(ALTDEVROOT)/include/PCSC/*.h $(ALTDEVROOT)/opt/pcsc-lite/include/PCSC/*.h),,true)
endif

ifneq ($(NOPCSC),)
    CFLAGS_INCLUDES += -DTS_NO_PCSC=1
else ifeq ($(MACOS)$(LINUXBREW),)
    # PCSC on Linux
    CFLAGS_INCLUDES += -I/usr/include/PCSC
    LDLIBS := -lpcsclite $(LDLIBS)
else
    # PCSC on macOS or Linuxbrew
    CFLAGS_INCLUDES += $(addprefix -I,$(wildcard $(ALTDEVROOT)/opt/pcsc-lite/include $(ALTDEVROOT)/opt/pcsc-lite/include/PCSC))
    LDLIBS := $(addprefix -L,$(wildcard $(ALTDEVROOT)/opt/pcsc-lite/lib)) -lpcsclite $(LDLIBS)
endif

ifneq ($(NODEKTEC),)
    # NODEKTEC is an alternative name for NODTAPI
    NODTAPI = true
endif

ifeq ($(NODTAPI)$(NODTAPI_CHECKED),)
    # Disable DTAPI on platforms where it is not supported.
    NODTAPI := $(if $(shell $(ROOTDIR)/build/dtapi-config.sh --support),,true)
    export NODTAPI_CHECKED := true
endif

ifneq ($(NODTAPI),)
    CFLAGS_INCLUDES += -DTS_NO_DTAPI=1
endif

ifdef NOGITHUB
    CFLAGS_INCLUDES += -DTS_NO_GITHUB=1
endif

ifdef BITRATE_FRACTION
    CFLAGS_INCLUDES += -DTS_BITRATE_FRACTION=1
endif

ifdef BITRATE_INTEGER
    CFLAGS_INCLUDES += -DTS_BITRATE_INTEGER=1
endif

ifdef BITRATE_FLOAT
    CFLAGS_INCLUDES += -DTS_BITRATE_FLOAT=1
endif

ifdef BITRATE_FIXED
    CFLAGS_INCLUDES += -DTS_BITRATE_FIXED=1
endif

ifdef BITRATE_DECIMALS
    CFLAGS_INCLUDES += -DTS_BITRATE_DECIMALS=$(BITRATE_DECIMALS)
endif

ifeq ($(MACOS),)
    # Link flags on Linux
    CFLAGS_INCLUDES += -I$(LIBTSDUCKDIR)/linux
    LDFLAGS_EXTRA += -Wl,-rpath,'$$ORIGIN',-z,noexecstack
    SOFLAGS = -Wl,-soname=$(notdir $@),-z,noexecstack
else
    # Link flags on macOS
    CFLAGS_INCLUDES += -I$(LIBTSDUCKDIR)/mac
    LDFLAGS_EXTRA += -Wl,-rpath,@executable_path -Wl,-rpath,@executable_path/../lib
    SOFLAGS = -install_name '@rpath/$(notdir $@)'
endif

CFLAGS_INCLUDES += $(addprefix -I,$(shell find $(LIBTSDUCKDIR) -type d ! -name private ! -name windows ! -name $(if $(MACOS),linux,mac)))

ifneq ($(TS_NO_BUILD_VERSION),)
    CPPFLAGS += -DTS_NO_BUILD_VERSION
endif

# Make sure that full paths of source files never appear in binaries.
ifneq ($(CC_FILE_PREFIX_MAP),)
    ifeq ($(DEBUG),)
        CXXFLAGS += -ffile-prefix-map=$(SRCROOT)/=
    endif    
endif

# List of plugins and tools to build.
# - Do not compile Dektec or HiDes tools when these devices are unsupported.
# - Tuners (dvb plugin, tslsdvb, tscan) shall be compiled everywhere because
#   the tuner emulator facility is available everywhere.
# - Build a list of plugins to not build or deinstall from the system tree.
#   Include obsolete plugins, were in separate shared libraries, now in libtsduck.so.
#   Maintenance: also update build/tsduck.nsi (Windows).

ifndef TSPLUGINS
    TSPLUGINS := $(sort $(notdir $(basename $(wildcard $(TSPLUGINSDIR)/tsplugin_*.cpp))))
    TSEXECS := $(sort $(notdir $(basename $(wildcard $(TSTOOLSDIR)/ts*.cpp))))
    NO_TSEXECS :=
    NO_TSPLUGINS := $(addprefix tsplugin_,dektec drop file fork hls http ip null psi skip srt tables)
    ifdef NODTAPI
        NO_TSEXECS += tsdektec
    endif
    ifdef MACOS
        NO_TSPLUGINS += tsplugin_hides
        NO_TSEXECS += tshides
    endif
    ifdef NOTELETEXT
        NO_TSPLUGINS += tsplugin_teletext
    endif
    ifdef NORIST
        NO_TSPLUGINS += tsplugin_rist
    endif
    ifdef NOPCSC
        NO_TSEXECS += tssmartcard
    endif
    TSEXECS := $(filter-out $(NO_TSEXECS),$(TSEXECS))
    TSPLUGINS := $(filter-out $(NO_TSPLUGINS),$(TSPLUGINS))
    export TSPLUGINS TSEXECS NO_TSEXECS NO_TSPLUGINS
endif
